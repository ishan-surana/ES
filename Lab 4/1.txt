from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.serialization import load_pem_private_key, load_pem_public_key
from cryptography.hazmat.primitives.asymmetric import dh
import base64

# Generating RSA Keys
def generate_rsa_key_pair():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()
    return private_key, public_key

def serialize_key(key, is_private=True):
    if is_private:
        return key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()
        )
    else:
        return key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )

def deserialize_key(pem_data, is_private=True):
    if is_private:
        return load_pem_private_key(pem_data, password=None)
    else:
        return load_pem_public_key(pem_data)

# Diffie-Hellman Parameters
def generate_dh_parameters():
    parameters = dh.generate_parameters(generator=2, key_size=2048)
    return parameters

def generate_dh_key_pair(parameters):
    private_key = parameters.generate_private_key()
    public_key = private_key.public_key()
    return private_key, public_key

def derive_shared_key(private_key, peer_public_key):
    shared_key = private_key.exchange(peer_public_key)
    return shared_key

def main():
    # Step 1: Generate RSA key pairs for subsystems
    print("Generating RSA keys for System A...")
    rsa_private_a, rsa_public_a = generate_rsa_key_pair()
    rsa_private_a_pem = serialize_key(rsa_private_a, is_private=True)
    rsa_public_a_pem = serialize_key(rsa_public_a, is_private=False)
    
    print("Generating RSA keys for System B...")
    rsa_private_b, rsa_public_b = generate_rsa_key_pair()
    rsa_private_b_pem = serialize_key(rsa_private_b, is_private=True)
    rsa_public_b_pem = serialize_key(rsa_public_b, is_private=False)
    
    # Step 2: Generate Diffie-Hellman parameters and key pairs
    print("Generating Diffie-Hellman parameters...")
    dh_parameters = generate_dh_parameters()
    
    print("Generating Diffie-Hellman key pairs for System A...")
    dh_private_a, dh_public_a = generate_dh_key_pair(dh_parameters)
    
    print("Generating Diffie-Hellman key pairs for System B...")
    dh_private_b, dh_public_b = generate_dh_key_pair(dh_parameters)
    
    # Step 3: Derive shared keys using Diffie-Hellman
    print("Deriving shared key for System A...")
    shared_key_a = derive_shared_key(dh_private_a, dh_public_b)
    print("Shared key for System A:", base64.b64encode(shared_key_a).decode())
    
    print("Deriving shared key for System B...")
    shared_key_b = derive_shared_key(dh_private_b, dh_public_a)
    print("Shared key for System B:", base64.b64encode(shared_key_b).decode())
    
    # Ensure shared keys match
    assert shared_key_a == shared_key_b
    print("Shared keys match!")

if __name__ == "__main__":
    main()